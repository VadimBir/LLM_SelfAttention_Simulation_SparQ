#include "cache.h"
#include <unordered_map>

std::unordered_map<uint64_t, int> access_frequency;
const int FREQUENCY_THRESHOLD = 10;

void cleanup_access_frequency() {
    for (auto it = access_frequency.begin(); it != access_frequency.end();) {
        if (it->second < FREQUENCY_THRESHOLD) {
            it = access_frequency.erase(it);
        } else {
            ++it;
        }
    }
}

void CACHE::l2c_prefetcher_initialize()
{
    cout << "CPU " << cpu << " L2C next line prefetcher" << endl;
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    uint64_t cache_line = ((addr>>LOG2_BLOCK_SIZE) << LOG2_BLOCK_SIZE);
    access_frequency[cache_line]++;
    if (access_frequency[cache_line] >= FREQUENCY_THRESHOLD) {
        uint64_t pf_addr = cache_line ;
        prefetch_line(ip, addr, pf_addr, FILL_L2, 0);
    }
//    if (access_frequency.size() > 4096){
//        cleanup_access_frequency();
//    }

    DP ( if (warmup_complete[cpu]) {
    cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr>>LOG2_BLOCK_SIZE);
    cout << " pf_cl: " << (pf_addr>>LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit << " type: " << +type << endl; });


    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L2C next line prefetcher final stats" << endl;
}
