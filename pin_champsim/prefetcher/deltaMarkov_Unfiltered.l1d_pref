#include "cache.h"


// MARKOV PREFETCHER LIBS
#include <map>
#include <unordered_map>
#include <vector>
#include <utility>
#include <algorithm>


//int64_t cnt = 0;

int DBGER = 0;
/*
 * 0 no debug,
 * 1 debug sizes,
 * 2 debug tables and LRU,
 * 3 debug with all details
 * 4 only pf_Values
 * 5 LRU_IT K:V and PREDICTIONS
 */


//int L1popular_prefetch_offset[] = {1};


std::unordered_map<int64_t, std::unordered_map<int64_t, int>> markov_table;
const int MARKOV_LRU_SIZE = 1 + 999;
 // 8192 16384 32768
using IteratorType = std::unordered_map<int64_t, std::unordered_map<int64_t, int>>::iterator;
std::array<std::unordered_map<int64_t, int>::iterator, MARKOV_LRU_SIZE> markov_LRU{};
int markov_LRU_front = 0;
const int MAX_PREDICTIONS = 9999;
const double MARKOV_PREDICTION_PERCENTTHRESHOLD = 1.5;


uint64_t pre_previous_addr = 0;
uint64_t previous_addr = 0;
uint64_t pf_addr = 0;
uint64_t preIP = 0;
//int64_t cnt = 0;

void CACHE::l1d_prefetcher_initialize() {
    cout << "Markov Talbe Size: " << MARKOV_LRU_SIZE << " Markov Confidence: " << MARKOV_PREDICTION_PERCENTTHRESHOLD << "%" << endl;
    cout << "CPU " << cpu << " L1D next line prefetcher" << endl;
}
int64_t combine_hashes(int64_t pre_key_delta, int64_t key_delta) {
    std::hash<int64_t> hasher;
    int64_t hash1 = hasher(pre_key_delta);
    int64_t hash2 = hasher(key_delta);

    return hash1 ^ (hash2 << 1); 
}

std::unordered_map<int64_t, int>::iterator markov_evict_lru() {
    std::unordered_map<int64_t, int>::iterator val_it = markov_LRU[0];
    for (int i = 1; i < markov_LRU_front; i++) {
        markov_LRU[i - 1] = markov_LRU[i];
    }
    return val_it;
}

void markov_update_lru(int index) {
    auto tmpVal = markov_LRU[index];
    for (int i = 0; i < markov_LRU_front; i++) {
        if (i < index) {
            continue;
        }
        markov_LRU[i] = markov_LRU[i + 1];
    }


    markov_LRU[markov_LRU_front - 1] = tmpVal;

}

std::vector<int64_t> markov_prefetcher(uint64_t addr, uint64_t ip, IteratorType key_it, std::unordered_map<int64_t, int>::iterator val_it) {
    std::vector<int64_t> top_predictions;
    int64_t doubleDeltaKey = combine_hashes(ip, (int64_t)previous_addr-(int64_t)addr);
    auto it = markov_table.find(doubleDeltaKey);
    if (it != markov_table.end()) {
        auto &next_blocks = it->second;
        std::vector<std::pair<int64_t, int>> predictions(next_blocks.begin(), next_blocks.end());
        std::sort(predictions.begin(), predictions.end(),
                  []( std::pair<int64_t, int> &a,  std::pair<int64_t, int> &b) {
                      return a.second > b.second;
                  });
        int total_count = std::accumulate(predictions.begin(), predictions.end(), 0,
        [](int sum,  std::pair<int64_t, int>& p) {
            return sum + p.second;
        });
        for (auto &prediction: predictions) {
            //if (top_predictions.size() >= MAX_PREDICTIONS) break;
            if (((double)prediction.second)*100/total_count >= MARKOV_PREDICTION_PERCENTTHRESHOLD) {
                pf_addr = prediction.first;
                top_predictions.push_back(pf_addr);
                //cout << "Markov Prediction: " << prediction.second << " total: " <<  total_count << " percent: " << (((double)prediction.second)*100/total_count) << endl;
            } else {
                break;
            }
        }
    }
    auto lru_it = std::find(markov_LRU.begin(), markov_LRU.end(), val_it);
    if (lru_it != markov_LRU.end()) {
        int index = lru_it - markov_LRU.begin();
        markov_update_lru(index);
    } else {
        if (markov_LRU_front != MARKOV_LRU_SIZE - 1) {
            markov_LRU[markov_LRU_front] = val_it;
            markov_LRU_front++;
        } else {
            auto toDel = markov_evict_lru();
            for (auto &outer_pair: markov_table) {
                auto &inner_map = outer_pair.second;
                for (auto it = inner_map.begin(); it != inner_map.end();) {
                    if (it == toDel) {
                        it = inner_map.erase(it);
                        break;
                    } else {
                        ++it;
                    }
                }
            }
            for (auto it = markov_table.begin(); it != markov_table.end();) {
                if (it->second.empty()) {
                    it = markov_table.erase(it);
                } else {
                    ++it;
                }
            }

            markov_LRU[markov_LRU_front - 1] = val_it;
        }
    }
    return top_predictions;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type) {
    
    // USING MARKOV PREFETCHER ---------------------------------------------------------------------------------------------- MARKOV START
    
    // markov preprocessing
    int64_t key_delta = 0;
    int64_t val_delta = 0;

    addr = addr >> LOG2_BLOCK_SIZE;
    //addr = addr << LOG2_BLOCK_SIZE;
    if (pre_previous_addr != 0) {
        key_delta = (int64_t)(pre_previous_addr) - (int64_t)(previous_addr);
        val_delta = (int64_t)(previous_addr) - (int64_t)(addr);
    }


    IteratorType key_it;
    std::unordered_map<int64_t, int>::iterator val_it;
    
    // filter out val_delta that were part of pupular_prefetch_offset
    //bool is_in_popular_offset = std::find(std::begin(L1popular_prefetch_offset), std::end(L1popular_prefetch_offset), val_delta) != std::end(L1popular_prefetch_offset);
    //if (!is_in_popular_offset) {
        // markov table update
        if (pre_previous_addr != 0) {
            int64_t final_hash_value = combine_hashes(preIP, key_delta);
            key_delta = final_hash_value;
        

            markov_table[key_delta][val_delta]++;

            key_it = markov_table.find(key_delta);
            val_it = key_it->second.find(val_delta);

        }
        // get Markov delta predictions
        std::vector<int64_t> pf_topP = markov_prefetcher(addr, ip, key_it, val_it);

        for (int64_t pf_offset: pf_topP) {

            pf_addr = (((int64_t)(addr) - pf_offset) << LOG2_BLOCK_SIZE);
            prefetch_line(ip, addr, (pf_addr), FILL_L2, 0);
        
            //GHP_Markov->append(pf_addr >> LOG2_BLOCK_SIZE);

            // if (GHP_Markov->size() > (NUM_CACHELINES*1)) { // does a sliding window of size
            //     GHP_Markov->pop();
            // }
            // prefetchGuessCnt_Markov++;
        }
    }
    // DONE USING MARKOV PREFETCHER ---------------------------------------------------------------------------------------------- DONE MARKOV


    pre_previous_addr = previous_addr;
    previous_addr = addr;
    preIP = ip;
    //cnt++;



}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr,
                                 uint32_t metadata_in) {

}

void CACHE::l1d_prefetcher_final_stats() {
    cout << "CPU " << cpu << " L1D next line prefetcher final stats" << endl;
}
