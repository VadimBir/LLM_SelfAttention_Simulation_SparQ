#include <map>
#include <unordered_map>
#include <vector>
#include <utility>
#include <algorithm>
// #include <array>
// #include <iostream>
#include <numeric>

class IPDelta_Markov_Delta {
    static const int MARKOV_LRU_SIZE = 512;
    static const int MAX_PREDICTIONS = 9999;
    static constexpr double MARKOV_PREDICTION_PERCENTTHRESHOLD = 6.25;
public:
    IPDelta_Markov_Delta() : markov_LRU_front(0), pre_previous_addr(0), previous_addr(0), pf_addr(0), pre_ip(0) {}

    std::vector<int64_t> operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type) {
        // USING MARKOV PREFETCHER ---------------------------------------------------------------------------------------------- MARKOV START

        // markov preprocessing
        int64_t key_delta = 0;
        int64_t val_delta = 0;

        addr = addr ;
        //addr = addr ;
        if (pre_previous_addr != 0) {
            key_delta = (int64_t)(pre_previous_addr) - (int64_t)(previous_addr);
            val_delta = (int64_t)(previous_addr) - (int64_t)(addr);
        }

        IteratorType key_it;
        std::unordered_map<int64_t, int>::iterator val_it;

        // filter out val_delta that were part of popular_prefetch_offset
        
        // markov table update
        if (pre_previous_addr != 0) {
            // int64_t final_hash_value = combine_hashes(pre_ip, key_delta);
            // key_delta = final_hash_value;

            markov_table[key_delta][val_delta]++;

            key_it = markov_table.find(key_delta);
            val_it = key_it->second.find(val_delta);
        }
        // get Markov delta predictions and return vector<int64_t> top_predictions
        std::vector<int64_t> pf_topP = markov_prefetcher(addr, ip, key_it, val_it);

        // update previous address and previous IP
        pre_previous_addr = previous_addr;
        previous_addr = addr;
        pre_ip = ip;

        
        return pf_topP;
        }
    

    


private:

    // Markov table and LRU
    std::unordered_map<int64_t, std::unordered_map<int64_t, int>> markov_table;
    
    using IteratorType = std::unordered_map<int64_t, std::unordered_map<int64_t, int>>::iterator;
    std::array<std::unordered_map<int64_t, int>::iterator, MARKOV_LRU_SIZE> markov_LRU{};
    int markov_LRU_front;



    // Address tracking
    uint64_t pre_previous_addr;
    uint64_t previous_addr;
    uint64_t pf_addr;
    uint64_t pre_ip;
    //int64_t cnt = 0;


    // Helper methods
    int64_t combine_hashes(int64_t pre_key_delta, int64_t key_delta) {
        std::hash<int64_t> hasher;
        int64_t hash1 = hasher(pre_key_delta);
        int64_t hash2 = hasher(key_delta);

        return hash1 ^ (hash2 << 1);
    }

    std::unordered_map<int64_t, int>::iterator markov_evict_lru() {
        std::unordered_map<int64_t, int>::iterator val_it = markov_LRU[0];
        for (int i = 1; i < markov_LRU_front; i++) {
            markov_LRU[i - 1] = markov_LRU[i];
        }
        return val_it;
    }

    void markov_update_lru(int index) {
        auto tmpVal = markov_LRU[index];
        for (int i = 0; i < markov_LRU_front; i++) {
            if (i < index) {
                continue;
            }
            markov_LRU[i] = markov_LRU[i + 1];
        }

        markov_LRU[markov_LRU_front - 1] = tmpVal;
    }

    std::vector<int64_t> markov_prefetcher(uint64_t addr, uint64_t ip, IteratorType key_it, std::unordered_map<int64_t, int>::iterator val_it) {
        std::vector<int64_t> top_predictions;
        // int64_t doubleDeltaKey = combine_hashes(ip, static_cast<int64_t>(previous_addr) - static_cast<int64_t>(addr));
        // auto it = markov_table.find(doubleDeltaKey);

        auto it = markov_table.find((int64_t)previous_addr-(int64_t)addr);

        if (it != markov_table.end()) {
            //cout << "Found in Markov Table" << endl;
            auto &next_blocks = it->second;
            std::vector<std::pair<int64_t, int>> predictions(next_blocks.begin(), next_blocks.end());
            std::sort(predictions.begin(), predictions.end(),
                      [](std::pair<int64_t, int> &a, std::pair<int64_t, int> &b) {
                          return a.second > b.second;
                      });
            int total_count = std::accumulate(predictions.begin(), predictions.end(), 0,
                [](int sum, std::pair<int64_t, int>& p) {
                    return sum + p.second;
                });
            for (auto &prediction : predictions) {
                //if (top_predictions.size() >= MAX_PREDICTIONS) break;
                if ((static_cast<double>(prediction.second) * 100 / total_count) >= MARKOV_PREDICTION_PERCENTTHRESHOLD) {
                    pf_addr = prediction.first;
                    top_predictions.push_back(pf_addr);
                    //std::cout << "Markov Prediction: " << prediction.second << " total: " <<  total_count << " percent: " << (((double)prediction.second)*100/total_count) << std::endl;
                } else {
                    break;
                }
            }
        }
        auto lru_it = std::find(markov_LRU.begin(), markov_LRU.end(), val_it);
        if (lru_it != markov_LRU.end()) {
            int index = static_cast<int>(lru_it - markov_LRU.begin());
            markov_update_lru(index);
        } else {
            if (markov_LRU_front != MARKOV_LRU_SIZE - 1) {
                markov_LRU[markov_LRU_front] = val_it;
                markov_LRU_front++;
            } else {
                auto toDel = markov_evict_lru();
                for (auto &outer_pair : markov_table) {
                    auto &inner_map = outer_pair.second;
                    for (auto it_inner = inner_map.begin(); it_inner != inner_map.end();) {
                        if (it_inner == toDel) {
                            it_inner = inner_map.erase(it_inner);
                            break;
                        } else {
                            ++it_inner;
                        }
                    }
                }
                for (auto it_outer = markov_table.begin(); it_outer != markov_table.end();) {
                    if (it_outer->second.empty()) {
                        it_outer = markov_table.erase(it_outer);
                    } else {
                        ++it_outer;
                    }
                }

                markov_LRU[markov_LRU_front - 1] = val_it;
            }
        }
        return top_predictions;
    }    
};
